en:
  landingpage:
    hero:
      headline: "Rapidly create interactive UIs in pure Ruby"
      subheadline: "Escape the frontend Hustle // Plug into Rails // Extend with Vue.js"
      button_one: "Learn more"
      button_two: "Getting Started"
    summary:
      fullstack_ruby:
        headline: "Fullstack Ruby"
        text: "Use your favorite language to create both backend logic and reusable frontend components."
      enhanced_maintainability:
        headline: "Enhanced Maintainability"
        text: "Greatly reduce the complexity in your codebase - less potential for bugs and more shipped features."
      no_code_generator:
        headline: "Not a code generator"
        text: "Unlike similar projects, we neither use Opal nor generate JavaScript boilerplate code from Ruby definitions."
      # open_source:
      #   headline: "Open Source"
      #   text: "Transparent communication, the MIT Licence and an active community have your back, no matter what."
    why:
      headline: "Matestack's Why: Simplify Web Application Development"
      text: "In order to create dynamic, 'app-like' web applications, developers started to create fullblown Javascript applications and reduced Rails to a pure JSON API. Using this common approach, compared to the classic single-repo MVC structure, we increased the complexity in our development by introducing a separate full-blown frontend framework. Implementing two separate systems (backend-api, frontent-app) is a pain: Two different code bases, two repositories to maintain, two different deployment schedules, two test environments, two everything...! And than add native app development for iOS and Android and probably a fancy microservice-oriented backend architecture on top of that! Beeing a small dev team, we decided not to adopt this modern web development complexity and decided to create... matestack!"
      text_2: "Matestack merges the back- and frontend-layer and automates the data flow between those two. On average, we write 50% less code, are much faster in our development, suffer less cognetive load, onboard junior devs way faster and simply have way more fun. Thanks to the reality-proven flexible architecture, we don't loose any possibility to extend our systems on the back or frontend. It's just Ruby and Vue.js!"
    plug_into_rails:
      headline: "Plug into Rails"
      text: "Matestack is designed as an alternative to the classic Rails view layer. All other concepts of Rails remain untouched. A HTTP request is processed the classic \"Rails way\". Inside a controller action, you can add a matestack helper, referencing a matestack page class. A matestack page consists of multiple components and is written in pure Ruby, as seen on the next section. Using Trailblazer's \"Cell\" concept, the matestack page renders HTML which is then transferred to the browser. Within the browser, pure Vue.js takes care of optional dynamic behaviour."
    ruby_classes:
      headline: "Create UIs in Ruby Classes"
      text: "Matestacks UI concept consists of three major building blocks: \"Component\" (reusable UI element), \"page\" (equivalent to a classic view) and \"app\" (used similarly to the classic layout). Pages, components and apps are pure Ruby classes defining the UI through a response method."
    spa_without_js:
      headline: "Create a Single Page Application without Javascript"
      text: "A Single Page Application (SPA) usually is loaded once and handles all user interactions dynamically by calling backend APIs. This gives the user the ofted desired \"app-feeling\". In contrast, the Rails View Layer only offers the static request/response mode to render content. Matestack fixes that without adding the complexity that a SPA written in JavaScript usually brings with itself. Matestack's dynamic 'transition' core component simply performs dynamic transitions between pages without full page reload, given that both pages are wrapped by the same app layout. You only have to create multiple pages and add the 'transition' components to their app like so:"
    interaction_without_js:
      headline: "Handle User Interactions without Javascript"
      text: "We love to add dynamic behaviour to our UIs. But we don't enjoy adding Javascript again and again if we want something to react dynamically on client-side events. That's why we've created a library of dynamic components handling these clientside dynamics for us. We just tell them what to do in our Ruby classes."
    custom_components:
      headline: "Create custom Components"
      text: "We've talked a lot about matestacks core components. But what about creating your own ones? It's quite straightforward. After you have identified recurring elements on your UI, you put them into a custom component. Defined once, you can use them across all your UI and reduce A LOT OF repeated markup code! Trust us, this is fun! Below, you can see an example of a custom component and its usage to avoid markup repetition:"
    extend_with_vue:
      headline: "Extend with Vue.js"
      text: "And what about some custom dynamic behaviour? No problem: Just create your own dynamic components with your own Vue.js code on top and use them right next to all other components. Sharing an Vue.js event bus, you can even communicate with all other components, or simply do whatever you want to do. In the end, it's just Rails and Vue.js, so there are no limits!"
    getting_started:
      headline: "You've seen enough?"
      text: Check out the documentation and start right away
      button_one: "Get Started"
      path: "docs_path"
      params:
        key: "install"
    team:
      headline: 'A growing team of core contributors improves matestack every day<br/> Become one of them!'
    os:
      community_driven:
        headline: "Community-driven"
        text: "Made by people like you for people like you! You need a feature which is not covered yet? Let the community know or implement it yourself and create your first PR!"
      quality_controlled:
        headline: "Quality-controlled"
        text: "Test driven development and throughout documentation are most important to us. We aim for full test coverage. If something breaks, our CI will let us know!"
      contributor_friendly:
        headline: "Contributor-friendly"
        text: "We welcome contributors of every kind. Junior or senior level - it doesn't matter. Now is the best time to get involved and have real impact!"
    gitter:
      headline: "Say Hello!"
      text: "Jump into our Gitter Chat and let us know if you face any issues, have a feature request or want to join the community!"
      button_one: "Gitter Chat"
      link: "https://gitter.im/basemate/community"
  challenge:
    hero:
      headline: "Win a free ticket to the Ruby Conference Thailand 2019"
      subheadline: "Use matestack, publish your project and receive our spare ticket!"
      button_one: "Learn more"
    details:
      headline: "Details"
      text: "We, as one of the sponsors of this year's RubyConfTh, have one spare ticket left and want to invite someone to come with us - here's the deal:"
      text_1: "Whoever <b>creates the best Rails app using matestack</b> or <b>makes the most meaningful contributions</b> by Sunday night receives said ticket!"
      text_2: "The winner gets picked by our core team right after the deadline is over. The winner gets notified via email and announced via Twitter. Bonus points for creativity and deployed applications (e.g. free heroku tier)."
      summary:
        challenge:
          headline: "The Challenge"
          text: "Make the <b>best use of</b> or <b>most meaningful contributions to</b> our gem 'matestack-ui-core'."
        deadline:
          headline: "The Deadline"
          text: "1st of September 2019, 12:00 AM Asia/Bangkok (UTC+7)."
        prize:
          headline: "The Prize"
          text: "One free ticket to RubyConfTh 2019 for the winner. No more, no less."
    faq:
      headline: "FAQ"
      questions:
        - question: "Who can participate in the challenge?"
          answer: "You. Seriously. Why should we exclude someone?<br/> Make the best use of our gem 'matestack-ui-core' by creating an example application.<br/> Or browse open issues and contribute to the project."
        - question: "What counts as submissions towards the challenge?"
          answer: "All public GitHub projects created by as well as pull requests and issues opened by the same GitHub user. Make sure that your GitHub projects <a href='https://github.com/basemate/matestack-ui-core/network/dependents?package_id=UGFja2FnZS00MTQ2NDgxMjU%3D' target='_blank'>publicly use our gem</a>. Issues and pull requests count if they have been opened between the 28th of August 2019 and the deadline on the 1st of September 2019, both 12:00 AM Asia/Bangkok (UTC+7)."
        - question: "Are there restrictions to what I can/should build"
          answer: 'Yes. Stay within the <a href="https://rubyonrails.org/conduct/" target="_blank">Rails Contribution Guidelines</a>. Reach out to us if you are unsure about your idea.'
        - question: "Is there reimbursement for travel and accommodation?"
          answer: "Sadly, we do not have the possibility to reimburse travel or accommodation expenses."
        - question: "Do projects or contributions count higher?"
          answer: "We will see. In the end, the matestack core team will also count in other factors such as creativity and diversity.<br/> But this shouldn't stop you from taking part!"
    getting_started:
      headline: "Ready to get going?"
      text: Check out the repo and start right away
      button_one: "Go to GitHub"
      link: "https://github.com/basemate/matestack-ui-core"
    questions:
      headline: "Anything unclear?"
      text: Reach out to us if any open questions remain!
      button_one: "Drop us a line"
      link: "mailto:info@matestack.org"
    # summary:
    #   diversity:
    #     headline: "Diversity first"
    #     text: "In favor of a diverse community, we will prefer submissions from members of underrepresented groups in tech."
    #   contribution_matters:
    #     headline: "Every contribution matters"
    #     text: "You have no idea for a matestack project? You can also take part in the challenge by opening PRs or (meaningful) tickets!"
    #   ticket_only:
    #     headline: "Conference ticket only"
    #     text: "Sadly, we do not have the possibility to reimburse travel or accommodation expenses."
